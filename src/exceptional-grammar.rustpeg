use ast::{Expression, Statement, Value};
use num::BigInt;
use num::rational::{Ratio};

#[pub]
statements -> Vec<Statement>
  = statement ** __

statement -> Statement
  = assignment

assignment -> Statement
  = "let" __ ident:identifier __ "=" __ exp:expression {
      Statement::Assign(true, ident, Box::new(exp))
    }

  / ident:identifier __ "=" __ exp:expression {
      Statement::Assign(false, ident, Box::new(exp))
    }

#[pub]
expression -> Expression
  = functionDefinition
  / addition

addition -> Expression
  = multiplication
  / left:addition __ op:addition_op __ right:multiplication {
      Expression::BinOp(op, Box::new(left), Box::new(right))
    }

addition_op -> String
  = op:$([+-]) { op.to_owned() }

multiplication -> Expression
  = primary
  / left:multiplication __ op:multiplication_op __ right:primary {
      Expression::BinOp(op, Box::new(left), Box::new(right))
    }

multiplication_op -> String
  = op:$([*/]) { op.to_owned() }

primary -> Expression
  = val:value { Expression::Value(val) }
  / "(" __ exp:expression __ ")" { exp }

identifier -> String
  = !keywords ident:$([a-zA-Z] [a-zA-Z0-9_]*) { ident.to_owned() }

#[pub]
value -> Value
  = number
  / charString
  / boolean

number -> Value
  = digits:digits {
      Value::Number(Ratio::from_integer(BigInt::parse_bytes(digits.as_bytes(), 10).unwrap()))
    }

digits -> String
  /* = c:$([0-9]+) "." d:$([0-9]+) { c.parse().unwrap() } */
  = c:$([0-9]+) { c.parse().unwrap() }

charString -> Value
  = string:string { Value::CharString(string) }

string -> String
  = '"' s:doubleQuotedCharacter* '"' { s.into_iter().collect() }

doubleQuotedCharacter -> char
  = !('"' / "\\" / eolChar) c:$. { c.chars().next().unwrap() }

boolean -> Value
  = b:"false" { Value::Boolean(false) }
  / b:"true" { Value::Boolean(true) }

functionDefinition -> Expression
  = "def(" __ args:functionArgumentList __ ")" __ block:block __ {
      Expression::Value(
        Value::Fn(Box::new((args, block)))
      )
    }

functionArgumentList -> Vec<String>
  = identifier ** comma

comma
  = "," __

block -> Vec<Statement>
  = "do" __ statements:statements __ "end" __ { statements }
__
  = [ \n]*
  / comment

comment
  = "#" (!eolChar .)*

keywords
  = "let"
  / "def"
  / "do"
  / "end"

eolChar
  = [\n\r\u{2028}\u{2029}]
