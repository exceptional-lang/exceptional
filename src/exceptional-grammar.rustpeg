use ast::{Expression, Statement, Literal, Pattern, StringMatcher};
use num::BigInt;
use num::rational::{Ratio, BigRational};
use regex::{escape, Regex};
use num::PrimInt;

#[pub]
statements -> Vec<Statement>
  = statement ** __

statement -> Statement
  = assignStatement
  / callStatement
  / raiseStatement
  / rescueStatement

assignStatement -> Statement
  = let ident:identifier "=" __ exp:expression {
      Statement::Assign(true, ident, Box::new(exp))
    }
  / ident:identifier "=" __ exp:expression {
      Statement::Assign(false, ident, Box::new(exp))
    }
  / targetAndProperty:accessExpression __ "=" __ exp:expression {
      if let Expression::IndexAccess(target, property) = targetAndProperty {
        Statement::IndexAssign(target, property, Box::new(exp))
      } else {
        panic!("should never happen")
      }
    }

callStatement -> Statement
  = exp:expression lparen args:callArguments rparen {
      Statement::Call(Box::new(exp), args)
    }

raiseStatement -> Statement
  = raise lparen exp:expression rparen {
      Statement::Raise(exp)
    }

rescueStatement -> Statement
  = rescue lparen pattern:pattern rparen block:block {
      Statement::Rescue(pattern, Box::new(block))
    }

callArguments -> Vec<Expression>
  = args:(expression ** comma) {
      args
    }

#[pub]
expression -> Expression
  = importExpression
  / functionDefinition
  / addition

importExpression -> Expression
  = import lparen exp:expression rparen { Expression::Import(Box::new(exp)) }

addition -> Expression
  = left:multiplication op:addition_op right:addition {
      Expression::BinOp(op, Box::new(left), Box::new(right))
    }
  / multiplication

addition_op -> String
  = op:$([+-]) __ { op.to_owned() }

multiplication -> Expression
  = left:accessExpression op:multiplication_op right:multiplication {
      Expression::BinOp(op, Box::new(left), Box::new(right))
    }
  / accessExpression

multiplication_op -> String
  = op:$([*/]) __ { op.to_owned() }

accessExpression -> Expression
  = target:primary properties:propertyAccess+ {
      properties.iter().fold(target, |acc, ref exp| {
        Expression::IndexAccess(Box::new(acc.clone()), Box::new((*exp).clone()))
      })
    }
  / primary

propertyAccess -> Expression
  = lbracket property:addition rbracket { property }
  / dot ident:identifier { Expression::Literal(Literal::CharString(ident)) }

primary -> Expression
  = val:literal { Expression::Literal(val) }
  / ident:identifier { Expression::Identifier(ident) }
  /* / lparen exp:expression rparen { exp } */

identifier -> String
  = !keywords ident:$([a-zA-Z] [a-zA-Z0-9_]*) __ { ident.to_owned() }

#[pub]
literal -> Literal
  = number
  / charString
  / boolean
  / map

number -> Literal
  = ratio:rawRatio {
      Literal::Number(ratio)
    }

rawRatio -> BigRational
  = c:digits "." d:digits {
      let num = c + &d;
      let power = 10.pow(d.len() as u32);
      let int = BigInt::parse_bytes(num.as_bytes(), 10).unwrap();
      Ratio::from_integer(int) / Ratio::from_integer(BigInt::from(power))
    }
  / digits:digits {
      Ratio::from_integer(BigInt::parse_bytes(digits.as_bytes(), 10).unwrap())
    }

digits -> String
  = c:$([0-9]+) __ {
      c.parse().unwrap()
    }

charString -> Literal
  = string:rawString { Literal::CharString(string) }

rawString -> String
  = '"' s:doubleQuotedCharacter* '"' __ { s.into_iter().collect() }

doubleQuotedCharacter -> char
  = !('"' / "\\" / eolChar) c:$. { c.chars().next().unwrap() }

boolean -> Literal
  = b:rawBoolean { Literal::Boolean(b) }

rawBoolean -> bool
  = b:"false" __ { false }
  / b:"true" __ { true }

functionDefinition -> Expression
  = "def" lparen args:functionArgumentList rparen block:block {
      Expression::Literal(
        Literal::Fn(Box::new(args), Box::new(block))
      )
    }

functionArgumentList -> Vec<String>
  = identifier ** comma

comma
  = "," __

block -> Vec<Statement>
  = do statements:statements end { statements }

map -> Literal
  = lbrace pairs:keyPairList rbrace {
      Literal::Map(pairs)
    }

keyPairList -> Vec<(Expression, Expression)>
  = pairs:(key:expression fatArrow value:expression { (key, value) } ) ** comma {
      pairs
    }

pattern -> Pattern
  = mapPattern
  / stringMatchPattern
  / numberPattern
  / booleanPattern
  / identifierPattern
  / charStringPattern

patternKey -> Pattern
  = numberPattern
  / charStringPattern
  / booleanPattern

mapPattern -> Pattern
  = lbrace pairs:patternPairList rbrace {
      Pattern::Map(pairs)
    }

patternPairList -> Vec<(Pattern, Pattern)>
  = pairs:(key:patternKey fatArrow value:pattern { (key, value) } ) ** comma {
      pairs
    }

numberPattern -> Pattern
  = number:rawRatio {
      Pattern::Number(number)
    }

charStringPattern -> Pattern
  = string:rawString {
      Pattern::CharString(string)
    }

booleanPattern -> Pattern
  = bool:rawBoolean {
      Pattern::Boolean(bool)
    }

identifierPattern -> Pattern
  = ident:identifier {
      Pattern::Identifier(ident)
    }

stringMatchPattern -> Pattern
  = pattern_list:stringMatchPatternList {
      let (bindings, regex) =
        pattern_list
          .into_iter()
          .fold((vec![], "".to_owned()), |(mut bindings, regex), pattern| {

          match pattern {
            Pattern::CharString(ref str) => {
              (bindings, regex + &escape(&*str))
            },
            Pattern::Number(ref num) => {
              (bindings, regex + &format!("{}", num))
            },
            Pattern::Identifier(ref name) => {
              bindings.push(name.to_owned());
              (bindings, regex + r#"(.*?)"#)
            }
            _ => panic!("unsupported in string pattern match"),
          }
        });

      Pattern::StringMatch(bindings.to_vec(), StringMatcher { regex: Regex::new(&regex).unwrap() })
   }

stringMatchPatternList -> Vec<Pattern>
  = left:stringMatchAtom __ "++" __ right:stringMatchPatternList {
      let mut ret = vec![left];
      ret.append(&mut right.clone());
      ret
    }
  / left:stringMatchAtom __ "++" __ right:stringMatchAtom {
      vec![left, right]
    }

stringMatchAtom -> Pattern
  = numberPattern
  / charStringPattern
  / identifierPattern

__
  = [ \n]*
  / comment

comment
  = "#" (!eolChar .)*

keywords
  = let
  / "def"
  / "do"
  / end
  / raise
  / rescue

let
  = "let" __

do
  = "do" __

end
  = "end" __

raise
  = "raise"

import
  = "import"

rescue
  = "rescue"

lparen
  = "(" __

rparen
  = __ ")" __

lbrace
  = __ "{" __

rbrace
  = __ "}" __

lbracket
  = __ "[" __

rbracket
  = __ "]" __

fatArrow
  = __ "=>" __

dot
  = "."

eolChar
  = [\n\r\u{2028}\u{2029}]
